import type { NextPage } from 'next'
import {useEffect, useState, useRef} from 'react'
import Head from 'next/head'
import Image from 'next/image'
import axios from 'axios';
import Recipe from '../components/Recipe/Recipe';
import Loading from "../components/Loading/Loading";
import RecipeGrid from "../components/RecipeGrid/RecipeGrid";
import Nav from '../components/Nav/Nav'
import styles from '../styles/Home.module.css'
import { splitAndCapitalize } from '../utils/utils';
import RecipeAccordian from '../components/RecipeAccordian/RecipeAccordian';
import RecipePage from '../components/RecipePage/RecipePage';
import _ from "lodash"


const Home: NextPage = () => {
  const [error, setError] = useState("");
  const [isLoading, setLoading] = useState(false);
  const [recipeData, setRecipeData] = useState([]);
  const [isComplexSearchVisible, setComplexSearchVisibility] = useState(false);
  const [activeRecipe, setActiveRecipe] = useState([]);
  const complexSearch = useRef();

  console.log(activeRecipe)

  // issue with numbers
  const [formState, setFormState] = useState({
    query: 'pork',
    cuisine: '',
    excludeCuisine: '',
    diet: '',
    intolerances: '',
    equipment: '',
    includeIngredients: '',
    excludeIngredients: '',
    type: '',
    instructionsRequired: 'true',
    fillIngredients: 'false',
    addRecipeInformation: 'true',
    titleMatch: '',
    maxReadyTime: '20',
    ignorePantry: 'true',
    sort: 'calories',
    sortDirection: 'asc',
    minCarbs: '',
    maxCarbs: '',
    minProtein: '',
    maxProtein: '',
    minCalories: '',
    maxCalories: '',
    minFat: '',
    maxFat: '',
    minAlcohol: '',
    maxAlcohol: '',
    minCaffeine: '',
    maxCaffeine: '',
    minCopper: '',
    maxCopper: '',
    minCalcium: '',
    maxCalcium: '',
    minCholine: '',
    maxCholine: '',
    minCholesterol: '',
    maxCholesterol: '',
    minFluoride: '',
    maxFluoride: '',
    minSaturatedFat: '',
    maxSaturatedFat: '',
    minVitaminA: '',
    maxVitaminA: '',
    minVitaminC: '',
    maxVitaminC: '',
    minVitaminD: '',
    maxVitaminD: '',
    minVitaminE: '',
    maxVitaminE: '',
    minVitaminK: '',
    maxVitaminK: '',
    minVitaminB1: '',
    maxVitaminB1: '',
    minVitaminB2: '',
    maxVitaminB2: '',
    minVitaminB5: '',
    maxVitaminB5: '',
    minVitaminB3: '',
    maxVitaminB3: '',
    minVitaminB6: '',
    maxVitaminB6: '',
    minVitaminB12: '',
    maxVitaminB12: '',
    minFiber: '',
    maxFiber: '',
    minFolate: '',
    maxFolate: '',
    minFolicAcid: '',
    maxFolicAcid: '',
    minIodine: '',
    maxIodine: '',
    minIron: '',
    maxIron: '',
    minMagnesium: '',
    maxMagnesium: '',
    minManganese: '',
    maxManganese: '',
    minPhosphorus: '',
    maxPhosphorus: '',
    minPotassium: '',
    maxPotassium: '',
    minSelenium: '',
    maxSelenium: '',
    minSodium: '',
    maxSodium: '',
    minSugar: '',
    maxSugar: '',
    minZinc: '',
    maxZinc: '',
    offset: '',
    number: '25',
    limitLicense: '',
    ranking: ''
})

  console.log(recipeData)
  console.log(formState)

  // Only query parameter has an effect
  // Need to make a request to the API and determine the url structure compliant with python FastAPI
  const createUrl = (baseUrl, params) => {
    baseUrl = `${baseUrl}?`
    for (const parameter in params) {
      if (params[parameter] !== '') {
        Object.keys(params).indexOf(parameter) === 0
        ? baseUrl = `${baseUrl}req=${parameter}=${params[parameter]}`
        : baseUrl = `${baseUrl}&${parameter}=${params[parameter]}`
      }
    }
    return baseUrl;
  }

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormState({
      ...formState,
      [name]: value
    })
  }

  const handleSearch = async () => {
    const response = await axios.post(`https://uqj4m59r35.execute-api.us-east-1.amazonaws.com/prod/search`, formState);
    console.log(response)
    setRecipeData(JSON.parse(response.data))
  }

  console.log(recipeData)
  // console.log(JSON.stringify(formState))

  // Search getting through to FastAPI, but resource cannot be found - error with search_recipes. Probably how request is structured
  useEffect(() => {
    handleSearch()
  }, [])

  return (
    <>    
      <div>
        <Head>
          <title>Recipes</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          {activeRecipe.length !== 0 ? (
            <RecipePage activeRecipe={activeRecipe} setActiveRecipe={setActiveRecipe} />
          ) : (
          <>
          <Nav />
          <div className="header-container">
            <div className="search-container" style={{top: isComplexSearchVisible ? "250px" : "100px"}}>
              <input type="text" name="query" id="query" placeholder="Search..." onChange={handleChange} />
              <button className="search-btn" onClick={handleSearch}>Search</button>
              <button 
                className="advanced-search-btn" 
                onClick={() => setComplexSearchVisibility(isComplexSearchVisible => !isComplexSearchVisible)}
                >
                  Advanced Search
                </button>
            </div>
            <div className="advanced-search" style={{width: "100%", height: isComplexSearchVisible ? "100px" : "0px"}}>
              {isComplexSearchVisible && (
                <div className="complex-search" ref={complexSearch}>
                  {Object.keys(formState).map(key => (
                      <div className="input-container" key={key} style={{margin: "10px"}}>
                          <label htmlFor={key} style={{fontWeight: "bold", marginBottom: "10px"}}>{splitAndCapitalize(key)}</label>
                          {!formState[key].match(/(true|false)/g)
                          ? (<input 
                              name={key}
                              id={key}
                              onChange={handleChange}
                              style={{
                                width: "300px", 
                                height: "30px", 
                                borderRadius: "5px", 
                                border: "none", 
                                boxShadow: "rgba(0, 0, 0, 0.24) 0px 3px 8px"
                              }} />)
                          : (
                            <select 
                              id={key} 
                              onChange={handleChange} 
                              style={{
                                width: "300px", 
                                height: "30px", 
                                borderRadius: "5px", 
                                border: "none", 
                                boxShadow: "rgba(0, 0, 0, 0.24) 0px 3px 8px"
                              }} >
                              <option value="true">True</option>
                              <option value="false">False</option>
                            </select>
                          )}
                      </div>
                  ))}
                </div>
                )}
            </div>
            {/* <h1>Find your recipe!</h1> */}
          </div>
          {recipeData.results && (
            <div className="search">
              {recipeData.results.map(recipe => (
                <RecipeAccordian
                  recipe={recipe}
                  setActiveRecipe={setActiveRecipe}
                />
              ))}
            </div>
          )}
        </>
          )}
        </main>
      </div>
      {isLoading && <Loading />}
      <style jsx>{`
        main {
          position: relative;
          min-height: 100vh;
        }

        .advanced-search {
          background: #f3f3f4;
          transition: 0.25s ease-in
        }

        .complex-search {
          height: 100%;
          width: 100%;
        }

        .search-container {
          // position: absolute;
          display: flex;
          width: 700px;
          height: 60px;
          border-radius: 5px;
          border: none;
          margin-bottom: 20px;
          // box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;
          transition: 0.25s ease-in
        }

        .search-container input {
          outline: 1px solid black;
          margin-right: 10px;
          border: none;
          height: 100%;
          border-radius: 5px;
          width: 70%;
          padding: 10px
        }

        .search-container button {
          height: 100%;
          width: 15%;
          border: none;
          background: white;
          cursor: pointer;
          font-weight: bold;
          font-size: 1rem;
          margin-right: 10px;
          border: 1px solid black;
          border-radius: 5px
        }

        .header-container {
          width: 100%;
          height: calc(100vh - 90px);
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center
        }

        .search {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
          padding-left: 25px;
          gap: 25px;
          justify-items: center 
        }

        .complex-search {
          display: flex;
          align-items: center;
          overflow-x: scroll;
          overflow-y: hidden;
          padding: 15px
        }

        .input-container {
          display: flex;
          flex-direction: column;
          width: 300px;
          margin-right: 10px
        }

        .input-container select {
          width: 100%
        }
      `}</style>
    </>
  )
}

export default Home
